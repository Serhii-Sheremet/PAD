<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAACAAAAAgAAAAIAAAASAAABkgAAA2YAAAP2AAAD/gAAA/4AAAP+AAAD/gAAA/4AA
        AP+AAAD/gAAA/4AAAP+AAAD/gAAA/4AAAP+AAAD/gAAA/4AAAP+AAAD/gAAA/4AAAPGAAACkgAAAIYAA
        AACAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAACAAAAAgAAAXIAAAPGAAAD/gAAA/4AAAP+AAAD/gAAA/4AA
        AP+AAAD/gAAA/4AAAP+AAAD/gAAA/4AAAP+AAAD/gAAA/4AAAP+AAAD/gAAA/4AAAP+AAAD/gAAA/4AA
        AP+AAACxgAAAEYAAAACAAAAAAAAAAAAAAAAAAAAAgAAAAIAAABCAAADIgAAA/4AAAN2AAACDgAAAdoAA
        AHeAAAB3gAAAd4AAAHeAAAB3gAAAd4AAAHeAAAB3gAAAd4AAAHeAAAB3gAAAd4AAAHeAAAB3gAAAd4AA
        AHeAAACugAAA/IAAAPyAAABYgAAAAIAAAAAAAAAAAAAAAAAAAACAAAAAgAAAJ4AAAOeAAAD/gAAAdoAA
        AACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAA
        AACAAAAAgAAAAIAAACCAAADegAAA/4AAAIOAAAAAgAAAAAAAAAAAAAAAAAAAAIAAAACAAAAqgAAA6oAA
        AP+AAABlgAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAIAAAACAAAAAgAAAFYAAANSAAAD/gAAAiYAAAACAAAAAAAAAAAAAAAAAAAAAgAAAAIAA
        ACqAAADpgAAA/4AAAGaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAACAAAAWgAAA1YAAAP+AAACIgAAAAIAAAAAAAAAAAAAAAAAA
        AACAAAAAgAAAKoAAAOmAAAD/gAAAZoAAAACAAAAAgAAAAIAAAACAAAAAgAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAIAAABaAAADVgAAA/4AAAIiAAAAAgAAAAAAA
        AAAAAAAAAAAAAIAAAACAAAAqgAAA6YAAAP+AAABmgAAAAIAAAACAAAAVgAAACIAAAACAAAAAgAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAgAAAFoAAANWAAAD/gAAAiIAA
        AACAAAAAAAAAAAAAAAAAAAAAgAAAAIAAACuAAADtgAAA/4AAAGeAAAAAgAAAHYAAAMKAAACXgAAAFIAA
        AACAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAACAAAAWgAAA1YAA
        AP+AAACIgAAAAIAAAAAAAAAAAAAAAAAAAACAAAAAgAAAIYAAALeAAADJgAAAUIAAAACAAAA3gAAA9IAA
        AP+AAACvgAAAIYAAAACAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAIAA
        ABaAAADVgAAA/4AAAIiAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAACgAAADIAAAA2AAAAFgAAAAIAA
        ADeAAADygAAA/4AAAP+AAADEgAAAMYAAAACAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AACAAAAAgAAAFoAAANWAAAD/gAAAiIAAAACAAAAAgAAAAIAAAACAAAABgAAAA4AAAAKAAAACgAAAAoAA
        AAKAAAAAgAAAOYAAAPKAAAD/gAAA/4AAAP+AAADXgAAARYAAAACAAAAAgAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAIAAAACAAAAWgAAA1YAAAP+AAACIgAAAAIAAAACAAAAAgAAARYAAAKSAAACqgAAAqoAA
        AKqAAACqgAAAqoAAAKiAAAC8gAAA+4AAAP+AAAD/gAAA/4AAAP+AAADlgAAAW4AAAAGAAAAAgAAAAIAA
        AAAAAAAAAAAAAAAAAAAAAAAAgAAAAIAAABaAAADVgAAA/4AAAIiAAAAAgAAAAIAAAAaAAACwgAAA/4AA
        AP+AAAD/gAAA/4AAAP+AAAD/gAAA/4AAAP+AAAD/gAAA/4AAAP+AAAD/gAAA/4AAAP+AAADxgAAAc4AA
        AAaAAAAAgAAAAIAAAAAAAAAAAAAAAAAAAACAAAAAgAAAFoAAANWAAAD/gAAAiIAAAACAAAAAgAAACIAA
        ALmAAAD/gAAA/4AAAP+AAAD/gAAA/4AAAP+AAAD/gAAA/4AAAP+AAAD/gAAA/4AAAP+AAAD/gAAA/4AA
        AP+AAAD5gAAAjIAAAA6AAAAAgAAAAAAAAAAAAAAAAAAAAIAAAACAAAAWgAAA1YAAAP+AAACIgAAAAIAA
        AACAAAAIgAAAuIAAAP+AAAD/gAAA/4AAAP+AAAD/gAAA/4AAAP+AAAD/gAAA/4AAAP+AAAD/gAAA/4AA
        AP+AAAD/gAAA/4AAAP+AAAD+gAAApIAAABOAAAAAAAAAAAAAAAAAAAAAgAAAAIAAABaAAADVgAAA/4AA
        AIiAAAAAgAAAAIAAAAiAAAC4gAAA/4AAAP+AAAD/gAAA/4AAAP+AAAD/gAAA/4AAAP+AAAD/gAAA/4AA
        AP+AAAD/gAAA/4AAAP+AAAD/gAAA/4AAAP6AAACkgAAAE4AAAAAAAAAAAAAAAAAAAACAAAAAgAAAFoAA
        ANWAAAD/gAAAiIAAAACAAAAAgAAACIAAALmAAAD/gAAA/4AAAP+AAAD/gAAA/4AAAP+AAAD/gAAA/4AA
        AP+AAAD/gAAA/4AAAP+AAAD/gAAA/4AAAP+AAAD5gAAAjIAAAA6AAAAAgAAAAAAAAAAAAAAAAAAAAIAA
        AACAAAAWgAAA1YAAAP+AAACIgAAAAIAAAACAAAAGgAAAsIAAAP+AAAD/gAAA/4AAAP+AAAD/gAAA/4AA
        AP+AAAD/gAAA/4AAAP+AAAD/gAAA/4AAAP+AAAD/gAAA8YAAAHOAAAAGgAAAAIAAAACAAAAAAAAAAAAA
        AAAAAAAAgAAAAIAAABaAAADVgAAA/4AAAIiAAAAAgAAAAIAAAACAAABFgAAApIAAAKqAAACqgAAAqoAA
        AKqAAACqgAAAqIAAALyAAAD7gAAA/4AAAP+AAAD/gAAA/4AAAOWAAABbgAAAAYAAAACAAAAAgAAAAAAA
        AAAAAAAAAAAAAAAAAACAAAAAgAAAFoAAANWAAAD/gAAAiIAAAACAAAAAgAAAAIAAAACAAAABgAAAA4AA
        AAKAAAACgAAAAoAAAAKAAAAAgAAAOYAAAPKAAAD/gAAA/4AAAP+AAADXgAAARYAAAACAAAAAgAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAACAAAAWgAAA1YAAAP+AAACIgAAAAIAAAACAAAAAgAAAAIAA
        AACAAAAAgAAAAoAAAAyAAAANgAAABYAAAACAAAA3gAAA8oAAAP+AAAD/gAAAxIAAADGAAAAAgAAAAIAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAIAAABaAAADVgAAA/4AAAIiAAAAAgAAAAAAA
        AAAAAAAAAAAAAIAAAACAAAAhgAAAt4AAAMmAAABQgAAAAIAAADeAAAD0gAAA/4AAAK+AAAAhgAAAAIAA
        AACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAgAAAFoAAANWAAAD/gAAAiIAA
        AACAAAAAAAAAAAAAAAAAAAAAgAAAAIAAACuAAADtgAAA/4AAAGeAAAAAgAAAIIAAAMiAAACYgAAAFIAA
        AACAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAACAAAAWgAAA1YAA
        AP+AAACIgAAAAIAAAAAAAAAAAAAAAAAAAACAAAAAgAAAKoAAAOmAAAD/gAAAZoAAAACAAAABgAAAGYAA
        AAmAAAAAgAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAIAA
        ABaAAADVgAAA/4AAAIiAAAAAgAAAAAAAAAAAAAAAAAAAAIAAAACAAAAqgAAA6YAAAP+AAABmgAAAAIAA
        AACAAAAAgAAAAIAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AACAAAAAgAAAFoAAANWAAAD/gAAAiIAAAACAAAAAAAAAAAAAAAAAAAAAgAAAAIAAACqAAADpgAAA/4AA
        AGaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAIAAAACAAAAWgAAA1YAAAP+AAACIgAAAAIAAAAAAAAAAAAAAAAAAAACAAAAAgAAAKoAA
        AOqAAAD/gAAAZYAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAACAAAAAgAAAAIAAABWAAADUgAAA/4AAAImAAAAAgAAAAAAAAAAAAAAAAAAAAIAA
        AACAAAAngAAA54AAAP+AAAB2gAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAA
        AACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAIIAAAN6AAAD/gAAAg4AAAACAAAAAAAAAAAAA
        AAAAAAAAgAAAAIAAABCAAADIgAAA/4AAAN2AAACDgAAAdoAAAHeAAAB3gAAAd4AAAHeAAAB3gAAAd4AA
        AHeAAAB3gAAAd4AAAHeAAAB3gAAAd4AAAHeAAAB3gAAAd4AAAHeAAACugAAA/IAAAPyAAABYgAAAAIAA
        AAAAAAAAAAAAAAAAAACAAAAAgAAAAIAAAFyAAADxgAAA/4AAAP+AAAD/gAAA/4AAAP+AAAD/gAAA/4AA
        AP+AAAD/gAAA/4AAAP+AAAD/gAAA/4AAAP+AAAD/gAAA/4AAAP+AAAD/gAAA/4AAAP+AAAD/gAAAsYAA
        ABGAAAAAgAAAAAAAAAAAAAAAAAAAAIAAAACAAAAAgAAABIAAAGSAAADZgAAA/YAAAP+AAAD/gAAA/4AA
        AP+AAAD/gAAA/4AAAP+AAAD/gAAA/4AAAP+AAAD/gAAA/4AAAP+AAAD/gAAA/4AAAP+AAAD/gAAA8YAA
        AKSAAAAhgAAAAIAAAAAAAAAA4AAAAeAAAADgAAAA4AAAAOA//wDgf/+A4Af/gOAB/4DgAP+A4AB/gAAA
        P4AAAB+AAAAPgAAAA4AAAAOAAAADgAAAA4AAAAOAAAADgAAAD4AAAB+AAAA/gOAAf4DgAP+A4AH/gOAH
        /4Dgf/+A4D//AOAAAADgAAAA4AAAAOAAAAE=
</value>
  </data>
</root>